elCicdDefs:
  JENKINS_SERVICE_NAME: jenkins
  JENKINS_REMOTE_SERVICE_NAME: jenkins-remote
  DISABLE_ADMINISTRATIVE_MONITORS: "false"
  KUBERNETES_MASTER: https://kubernetes.default:443
  ENABLE_FATAL_ERROR_LOG_FILE: "false"
  JENKINS_INSTALL_DIR: /var/lib/jenkins
  JENKINS_CONFIG_FILE_PATH: /mnt/jenkins-config

  JENKINS_CASC: jenkins-casc
  JENKINS_CASC_YAML: jenkins-casc.yaml
  JENKINS_CASC_PATH: $<JENKINS_CONFIG_FILE_PATH>/$<JENKINS_CASC>
  CASC_RELOAD_TOKEN: elcicd

  JENKINS_PLUGINS: jenkins-plugins
  JENKINS_PLUGINS_TXT: jenkins-plugins.txt
  JENKINS_PLUGINS_PATH: $<JENKINS_CONFIG_FILE_PATH>/$<JENKINS_PLUGINS>

elCicdDefs-JENKINS_PERSISTENT:
  JENKINS_PERSISTENT_VOLUME_MNT:
    mountPath: $<JENKINS_INSTALL_DIR>
    name: $<JENKINS_SERVICE_NAME>-data
  JENKINS_PERSISTENT_VOLUME:
    name: $<JENKINS_SERVICE_NAME>-data
    persistentVolumeClaim:
      claimName: $<JENKINS_SERVICE_NAME>

elCicdTemplates:
- templateName: deployment
  objName: $<JENKINS_SERVICE_NAME>
  labels:
    name: $<JENKINS_SERVICE_NAME>
  image: $<JENKINS_IMAGE>
  command: ["/bin/bash", "-c"]
  args:
  - if [[ -f ${JENKINS_CICD_PLUGINS_FILE} ]];
    then
        java -jar /usr/share/java/jenkins-plugin-manager.jar
            --verbose
            --war /usr/share/java/jenkins.war
            -f ${JENKINS_CICD_PLUGINS_FILE}
            --plugin-download-directory ${JENKINS_HOME}/plugins | tee -a /var/log/jenkins-startup.log;
    else
        echo "Jenkins plugins file not found ${JENKINS_CICD_PLUGINS_FILE}";
    fi;

    cp $<JENKINS_CASC_PATH>/$<JENKINS_CASC_YAML> $<JENKINS_INSTALL_DIR>;
    chmod 777 $<JENKINS_INSTALL_DIR>/$<JENKINS_CASC_YAML>;
    java -Djenkins.install.runSetupWizard=false
         -Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true
         $JENKINS_JAVA_OVERRIDES
         -jar /usr/share/java/jenkins.war >> /var/log/jenkins-startup.log;
  imagePullSecret: elcicd-jenkins-registry-credentials
  serviceAccountName: $<JENKINS_SERVICE_NAME>
  env:
  - name: JENKINS_JAVA_OVERRIDES
    value: -D-XX:+UseParallelGC
           -D-XX:MinHeapFreeRatio=5
           -D-XX:MaxHeapFreeRatio=10
           -D-XX:GCTimeRatio=4
           -D-XX:AdaptiveSizePolicyWeight=90
           -D-XX:+UnlockExperimentalVMOptions
           -D-XX:+UseCGroupMemoryLimitForHeap
           -Dsun.zip.disableMemoryMapping=true
  - name: OPENSHIFT_ENABLE_OAUTH
    value: $<OPENSHIFT_ENABLE_OAUTH>
  - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
    value: "true"
  - name: KUBERNETES_MASTER
    value: https://kubernetes.default:443
  - name: KUBERNETES_TRUST_CERTIFICATES
    value: "true"
  - name: JENKINS_SERVICE_NAME
    value: $<JENKINS_SERVICE_NAME>
  - name: JNLP_SERVICE_NAME
    value: $<JENKINS_SERVICE_NAME>
  - name: ENABLE_FATAL_ERROR_LOG_FILE
    value: $<ENABLE_FATAL_ERROR_LOG_FILE>
  - name: CASC_JENKINS_CONFIG
    value: $<JENKINS_CONFIG_FILE_PATH>
  - name: CASC_RELOAD_TOKEN
    value: $<CASC_RELOAD_TOKEN>
  - name: JENKINS_CICD_PLUGINS_FILE
    value: $<JENKINS_PLUGINS_PATH>/$<JENKINS_PLUGINS_TXT>
  - name: JENKINS_UC
    value: $<JENKINS_UC>
  - name: JENKINS_UC_INSECURE
    value: $<JENKINS_UC_INSECURE>
  ports:
    - name: httpport
      containerPort: 8080
    - name: jnlpport
      containerPort: 50000
  readinessProbe:
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 3
    timeoutSeconds: 240
  livenessProbe:
    failureThreshold: 2
    httpGet:
      path: /login
      port: 8080
    initialDelaySeconds: 420
    periodSeconds: 360
    timeoutSeconds: 240
  resources:
    limits:
      memory: $<JENKINS_MEMORY_REQUEST>
    requests:
      memory: $<JENKINS_MEMORY_LIMIT>
      cpu: $<JENKINS_CPU_REQUEST>
  projectedVolumes:
  - name: $<JENKINS_PLUGINS>
    mountPath: $<JENKINS_PLUGINS_PATH>
    configMaps:
      $<JENKINS_PLUGINS>: {}
  - name: $<JENKINS_CASC>
    mountPath: $<JENKINS_CASC_PATH>
    configMaps:
      $<JENKINS_CASC>: {}
  volumeMounts:
  - $<JENKINS_PERSISTENT_VOLUME_MNT>
  volumes:
  - $<JENKINS_PERSISTENT_VOLUME>

- templateName: persistentVolumeClaim
  mustHaveAnyProfile:
  - JENKINS_PERSISTENT
  objName: $<JENKINS_SERVICE_NAME>
  storageRequest: $<VOLUME_CAPACITY>
  accessMode: ReadWriteMany

- templateName: service
  objName: $<JENKINS_SERVICE_NAME>
  ports:
  - name: https
    port: 8080
  - name: jnlpport
    port: 50000

- templateName: configMap
  objName: $<JENKINS_CASC>
  data:
    $<JENKINS_CASC_YAML>: $<JENKINS_CASC_FILE>

- templateName: configMap
  objName: $<JENKINS_PLUGINS>
  data:
    $<JENKINS_PLUGINS_TXT>: $<JENKINS_PLUGINS_FILE>

- templateName: limitRange
  objName: jenkins
  limits:
  - default:
      memory: $<JENKINS_AGENT_MEMORY_LIMIT>
    defaultRequest:
      memory: $<JENKINS_AGENT_MEMORY_REQUEST>
      cpu: $<JENKINS_AGENT_CPU_REQUEST>
    type: Container

- templateName: configMap
  objName: openshift-jenkins-login-plugin-config
  mustHaveEveryProfile:
  - OKD
  data:
    Overall-Administer: admin,edit
    Overall-Read: admin,edit,elcicd-user
    Job-Build: elcicd-user
    Job-Cancel: elcicd-user
    Job-Read: elcicd-user

- templateName: ingress
  objName: $<JENKINS_SERVICE_NAME>
  host: $<JENKINS_URL>

- templateName: serviceAccount
  objName: $<JENKINS_SERVICE_NAME>
  annotations:
    serviceaccounts.openshift.io/oauth-redirecturi.jenkins: https://$<JENKINS_URL>

- templateName: clusterRoleBinding
  objName: $<JENKINS_SERVICE_NAME>-$<HELM_RELEASE_NAMESPACE>-cluster-admin
  mustHaveAnyProfile:
  - ONBOARDING
  mustNotHaveAnyProfile:
  - CICD
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: cluster-admin
  subjects:
  - kind: ServiceAccount
    name: $<JENKINS_SERVICE_NAME>
    namespace: $<HELM_RELEASE_NAMESPACE>

- templateName: serviceAccount
  objName: $<JENKINS_REMOTE_SERVICE_NAME>
  mustHaveAnyProfile:
  - ONBOARDING
  mustNotHaveAnyProfile:
  - CICD

- templateName: clusterRoleBinding
  objName: $<JENKINS_REMOTE_SERVICE_NAME>
  mustHaveAnyProfile:
  - ONBOARDING
  mustNotHaveAnyProfile:
  - CICD
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: elcicd-user
  subjects:
  - kind: ServiceAccount
    name: $<JENKINS_REMOTE_SERVICE_NAME>
    namespace: $<HELM_RELEASE_NAMESPACE>

- templateName: roleBinding
  objName: $<JENKINS_SERVICE_NAME>-$<HELM_RELEASE_NAMESPACE>-nonroot-builder
  mustHaveAnyProfile:
  - CICD
  - OKD
  mustNotHaveAnyProfile:
  - ONBOARDING
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: system:openshift:scc:nonroot-builder
  subjects:
  - kind: ServiceAccount
    name: $<JENKINS_SERVICE_NAME>
    namespace: $<HELM_RELEASE_NAMESPACE>

- templateName: roleBinding
  objName: $<JENKINS_SERVICE_NAME>-edit
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: edit
  subjects:
  - kind: ServiceAccount
    name: $<JENKINS_SERVICE_NAME>
    namespace: $<HELM_RELEASE_NAMESPACE>

- templateName: configMap
  mustHaveAnyProfile:
  - ONBOARDING
  objName: $<EL_CICD_META_INFO_NAME>
  data: $<EL_CICD_META_INFO>

- templateName: roleBinding
  objName: $<USER_GROUP>-jenkins-elcicd-user
  mustHaveAnyProfile:
  - CICD
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: elcicd-user
  subjects:
  - kind: Group
    name: $<USER_GROUP>
    apiGroup: rbac.authorization.k8s.io

- templateName: copyResource
  objName: $<EL_CICD_META_INFO_NAME>
  mustHaveAnyProfile:
  - CICD
  kind: ConfigMap
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objNames: $<EL_CICD_GIT_REPOS_READ_ONLY_KEYS>
  mustHaveAnyProfile:
  - CICD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objName: elcicd-jenkins-registry-credentials
  mustHaveAnyProfile:
  - CICD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objName: $<EL_CICD_BUILD_SECRETS_NAME>
  mustHaveAnyProfile:
  - CICD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objNames: $<PROD_REGISTRY_ENVS>
  objName: elcicd-$<>-registry-credentials
  mustHaveEveryProfile:
  - CICD
  - PROD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objNames: $<NONPROD_REGISTRY_ENVS>
  objName: elcicd-$<>-registry-credentials
  mustHaveEveryProfile:
  - CICD
  - NONPROD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

- templateName: copyResource
  objName: elcicd-helm-registry-credentials
  mustHaveEveryProfile:
  - CICD
  kind: Secret
  fromNamespace: $<EL_CICD_MASTER_NAMESPACE>
  toNamespace: $<HELM_RELEASE_NAMESPACE>

